// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncEdgeDeviceFailedRegistration mocks base method.
func (m *MockMetrics) IncEdgeDeviceFailedRegistration() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncEdgeDeviceFailedRegistration")
}

// IncEdgeDeviceFailedRegistration indicates an expected call of IncEdgeDeviceFailedRegistration.
func (mr *MockMetricsMockRecorder) IncEdgeDeviceFailedRegistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncEdgeDeviceFailedRegistration", reflect.TypeOf((*MockMetrics)(nil).IncEdgeDeviceFailedRegistration))
}

// IncEdgeDeviceSuccessfulRegistration mocks base method.
func (m *MockMetrics) IncEdgeDeviceSuccessfulRegistration() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncEdgeDeviceSuccessfulRegistration")
}

// IncEdgeDeviceSuccessfulRegistration indicates an expected call of IncEdgeDeviceSuccessfulRegistration.
func (mr *MockMetricsMockRecorder) IncEdgeDeviceSuccessfulRegistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncEdgeDeviceSuccessfulRegistration", reflect.TypeOf((*MockMetrics)(nil).IncEdgeDeviceSuccessfulRegistration))
}

// IncEdgeDeviceUnregistration mocks base method.
func (m *MockMetrics) IncEdgeDeviceUnregistration() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncEdgeDeviceUnregistration")
}

// IncEdgeDeviceUnregistration indicates an expected call of IncEdgeDeviceUnregistration.
func (mr *MockMetricsMockRecorder) IncEdgeDeviceUnregistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncEdgeDeviceUnregistration", reflect.TypeOf((*MockMetrics)(nil).IncEdgeDeviceUnregistration))
}

// SetPatchEdgeDeviceStatusTime mocks base method.
func (m *MockMetrics) SetPatchEdgeDeviceStatusTime(duration int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPatchEdgeDeviceStatusTime", duration)
}

// SetPatchEdgeDeviceStatusTime indicates an expected call of SetPatchEdgeDeviceStatusTime.
func (mr *MockMetricsMockRecorder) SetPatchEdgeDeviceStatusTime(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPatchEdgeDeviceStatusTime", reflect.TypeOf((*MockMetrics)(nil).SetPatchEdgeDeviceStatusTime), duration)
}

// SetPatchEdgeDeviceTime mocks base method.
func (m *MockMetrics) SetPatchEdgeDeviceTime(duration int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPatchEdgeDeviceTime", duration)
}

// SetPatchEdgeDeviceTime indicates an expected call of SetPatchEdgeDeviceTime.
func (mr *MockMetricsMockRecorder) SetPatchEdgeDeviceTime(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPatchEdgeDeviceTime", reflect.TypeOf((*MockMetrics)(nil).SetPatchEdgeDeviceTime), duration)
}

// SetProcessHeartbeatTime mocks base method.
func (m *MockMetrics) SetProcessHeartbeatTime(duration int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProcessHeartbeatTime", duration)
}

// SetProcessHeartbeatTime indicates an expected call of SetProcessHeartbeatTime.
func (mr *MockMetricsMockRecorder) SetProcessHeartbeatTime(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessHeartbeatTime", reflect.TypeOf((*MockMetrics)(nil).SetProcessHeartbeatTime), duration)
}
